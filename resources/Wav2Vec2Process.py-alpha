import sys
import numpy
stdout = sys.stdout
sys.stdout = sys.stderr

terminate = 'terminate_process'
model_loaded = 'wav2vec2_model_loaded'
huggingsound_loaded = 'huggingsound_loaded'
finished = 'transcription_finished'
ping = 'ping'

def main():

	modelName = 'medium'
	modelName = 'dwhoelz/whisper-medium-pt-ct2'
	#modelName = sys.argv[1]

	deviceNum = sys.argv[2]
	
	import os
	os.environ["OMP_NUM_THREADS"] = "6"

	from faster_whisper import WhisperModel
	
	print(huggingsound_loaded, file=stdout, flush=True)
	
	#import torch
	#cudaCount = torch.cuda.device_count()
	
	# Run just on CPU for now
	cudaCount = 0

	print(str(cudaCount), file=stdout, flush=True)

	if cudaCount > 0:
		deviceId = 'cuda:' + deviceNum
	else:
		deviceId = 'cpu:'
	
	try:
		model = WhisperModel(modelName, device=deviceId, compute_type="int8")

	except Exception as e:
		if deviceId != 'cpu':
			# loading on GPU failed (OOM?), try on CPU
			deviceId = 'cpu'
			model = WhisperModel(model_size_or_path=modelName, device=deviceId, compute_type="int8")
		else:
			raise e
	
	print(model_loaded, file=stdout, flush=True)
	print(deviceId, file=stdout, flush=True)
	
	while True:
		
		line = input()

		if line == terminate:
			break
		if line == ping:
			print(ping, file=stdout, flush=True)
			continue

		transcription = ''
		probs = []
		try:
			segments, info = model.transcribe(audio=line, language='pt', beam_size=5, word_timestamps=True)
			for segment in segments:
				transcription += segment.text
				words = segment.words
				if words is not None:
					probs += [word.probability for word in words]            
		except Exception as e:
			msg = repr(e).replace('\n', ' ').replace('\r', ' ')
			print(msg, file=stdout, flush=True)
			continue
		
		text = transcription.replace('\n', ' ').replace('\r', ' ')
		
		probs = probs if len(probs) != 0 else [0]
		finalScore = numpy.average(probs)        
		
		print(finished, file=stdout, flush=True)
		print(str(finalScore), file=stdout, flush=True)
		print(text, file=stdout, flush=True)

	return
	
if __name__ == "__main__":
	 main()
